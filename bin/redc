#!/usr/bin/env ruby
require 'gli'
require 'csv'
require 'bigdecimal'
require_relative '../lib/redc'

class App
  extend GLI::App

  program_desc 'Ruby Electronic Design Calcuator (REDC)'

  version Redc::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'DC-DC Feedback Voltage Divider Resistor Combination'
  command :rfbc do |c|
    c.desc 'Vout (V)'
    c.flag :vout, required: true, type: Float

    c.desc 'Vref (V)'
    c.flag :vref, required: true, type: Float

    c.desc 'ResistorTop (Î©)'
    c.flag :rt, default_value: 1_000_000, required: true, type: Float

    c.desc 'E-Series (E6 E12 E24 E48 E96)'
    c.flag :serie, default_value: 'E24', required: true, type: String

    c.action do |_global_options, options, _args|
      vout = options[:vout]
      vref = options[:vref]
      serie = options[:serie]
      target_resistor_top = options[:rt]

      factor = DCDCFeedbackVoltageDividerResistorCombination.factor(serie)

      resistor_bottmon_range = DCDCFeedbackVoltageDividerResistorCombination.resistor_range(factor)

      resistor_top_multiple = (3..6).map { |index| 10**index }

      resistor_top_range = factor.product(resistor_top_multiple).map { |a, b| BigDecimal(a.to_s) * b }

      results = DCDCFeedbackVoltageDividerResistorCombination.calculator_resistor_combination_results(
        resistor_top_range, resistor_bottmon_range, vout, vref
      )

      DCDCFeedbackVoltageDividerResistorCombination.format_target_resistor_combination(results, target_resistor_top)
      DCDCFeedbackVoltageDividerResistorCombination.format_resistor_combination_results(results)
    end
  end

  desc 'Calculate Inductor Values For DC-DC Converter Designs'
  command :clacl do |c|
    c.desc 'Vin(V)'
    c.flag :vin, required: true, type: Float

    c.desc 'Vout(V)'
    c.flag :vout, required: true, type: Float

    c.desc 'Iout(A)'
    c.flag :iout, required: true, type: Float

    c.desc 'fsw(Hz)'
    c.flag :fsw, required: true, type: Float

    c.desc 'ratio(None)'
    c.flag :ratio, required: false, type: Float, default_value: 0.3

    c.action do |_global_options, options, _args|
      vin = options[:vin]
      vout = options[:vout]
      iout = options[:iout]
      fsw = options[:fsw]
      ratio = options[:ratio]

      delta_IL = DCDCInductorParameters.calculator_delta_IL(iout, vout, vin, ratio)
      inductance_min_value_uH = DCDCInductorParameters.calculator_inductance_min_uH(vin, vout, delta_IL, fsw)

      closest_standard_inductance = DCDCInductorParameters.find_closest_standard_inductance(inductance_min_value_uH)

      relative_error = DCDCInductorParameters.calculator_relative_error(inductance_min_value_uH,
                                                                        closest_standard_inductance)

      inductors = DCDCInductorParameters.select_standard_inductor(closest_standard_inductance)

      DCDCInductorParameters.format_calculated_result(inductance_min_value_uH, closest_standard_inductance,
                                                      relative_error)
      DCDCInductorParameters.format_inductors_result(inductors)
    end
  end
end

exit App.run(ARGV)
