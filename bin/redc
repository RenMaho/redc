#!/usr/bin/env ruby
require 'gli'
require 'csv'
require 'bigdecimal'
require_relative '../lib/redc'

class App
  extend GLI::App

  program_desc 'Ruby Electronic Design Calcuator (REDC)'

  version Redc::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'DCDC Feedback Voltage Divider Resistor Combination'
  command :rfbc do |c|
    c.desc 'Vout (V)'
    c.flag :vout, required: true, type: Float

    c.desc 'Vref (V)'
    c.flag :vref, required: true, type: Float

    c.desc 'E-Series (E6 E12 E24 E48 E96)'
    c.flag :serie, default_value: 'E24', required: true, type: String

    c.action do |_global_options, options, _args|
      vout = options[:vout]
      vref = options[:vref]
      serie = options[:serie]

      resistor_combination_results = []

      factor = DCDCFeedbackVoltageDividerResistorCombination.factor(serie)
      # puts factor

      resistor_bottmon_range = DCDCFeedbackVoltageDividerResistorCombination.resistor_range(factor)
      # puts bottmon_resistor_range

      resistor_top_multiple = (3..6).map { |index| 10**index }
      # puts top_resistor_multiple

      resistor_top_range = factor.product(resistor_top_multiple).map { |a, b| BigDecimal(a.to_s) * b }
      # puts top_resistor_range

      resistor_top_range.each do |rt|
        rb = DCDCFeedbackVoltageDividerResistorCombination.calculator_resistor_bottom_value(vout, vref, rt)
        closest_resistor_value = DCDCFeedbackVoltageDividerResistorCombination.find_closest_resistor(rb,
                                                                                                     resistor_bottmon_range)
        error = DCDCFeedbackVoltageDividerResistorCombination.calculator_relative_error(rb, closest_resistor_value)

        resistor_combination_results << {
          resistor_top: rt,
          resistor_bottom: closest_resistor_value,
          relative_error: error
        }
      end

      resistor_combination_results = resistor_combination_results.sort_by { |result| result[:relative_error] }
      puts format("%-15s %-15s %-15s", "ResistorTop", "ResistorBottom", "RelativeError")
      puts "-"*45
      resistor_combination_results.each do |result|
        rt = DCDCFeedbackVoltageDividerResistorCombination.format_unit(result[:resistor_top])
        rb = DCDCFeedbackVoltageDividerResistorCombination.format_unit(result[:resistor_bottom])
        er = "#{result[:relative_error]}%"

        puts format("%-15s %-15s %-15s", rt, rb, er)
      end
    end
  end
end

exit App.run(ARGV)
